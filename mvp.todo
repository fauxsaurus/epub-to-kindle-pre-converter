[x] client (UI Prototype)
	[x] + file button
	[x] check that a file is in state
	[x] +CSS rules UI
	[x] validate the CSS rules
	[x] ensure that at least *one* replacement rule is set (otherwise the process is pointless)
	[x] send data to the server
	[x] +custom CSS
	[x] disable submit button if there are validation errors
	[x] upload file to server
		[x] +HTTPS
		[x] +.env file
[x] sever (initial API)
	[x] +HTTPS
	[x] CORS
	[x] validate formData upload
	[x] open zip file
	[x] find all files in text/
	[x] return list of files to client
	[x] serve files directly from zip folder
[x] client (convert text to images)
	[x] load a file (WITH proper CSS to determine text styles)
	[x] run from the server to prevent cross-origin issues preventing <iframe> examination
	[x] load each file
	[x] successfully query the iframe
	[x] draw all found text to images
		[x] ensure that no styling contaminates the generated SVGs
		[x] line wrap long text
		[x] Allow users to specify custom pre CSS (to get a larger text size on the images)
	[x] list generated images in below in an output section (under the file name in which they appear),
	[x] replace the markup
		[x] remove alt text markup (if it exists)
		[x] append image markup after source text (url format: images/file-img-#.ext)
		[x] remove source text
		[x] add new CSS to the page
		[x] get page HTML
	[x] send new images, pages, and CSS to the server
[x] server (bundle new epub)
	[x] accept incoming files
	[x] update HTML files
	[x] add new CSS to new zip
	[x] add images to new zip
	[x] client: download the file
	[x] send the epub
	[x] verify that the contents truly changed
[x] client (download new epub)
	[x] initiate an auto download (might not be able to do that without the click... not a problem with `.click()`)
	[x] download name = file.name-pre-converted-accessible-kindle.epub
[x] cleanup
	[x] share api/upload-files between client/server
[] UX
	[x] serve index.html at /
	[x] Add a download config button.
		[x] overhauled/centralized config and its types
		[x] Add a version number to the file
		[x] Add a link to the repo for use with repo url note?
		[x] make the CSS styles directory unique
	[x] Drag and drop two files onto a drop zone
		[x] add dropzone
		[x] ebook support
		[x] autofill json config support
			[x] validate config file
		[x] auto focus the file input on load
	[] images
		[] give an option to clear images (and revoke the blob URLs when doing so)
		[] Add labels derived from a change in file paths (constantly checking for a difference in the chapter name in the url) between images to show what chapter are in order by extracting the chapter name from the file.
		[] read the TOC or index thing to determine the order for the server to send chapter files in
	[] improve UI
		[] Show encountered errors for all HTTP requests in the UI!
		[] cleanup the internals
		[] prettify the externals
		[] Ensure that the new UI is accessible (as that's the point of this _entire_ exercise)!
	[] default to HTTP with a warning if those HTTPS envars/files aren't found.
	[] encourage users to validate the epub (beyond the scope of this 80:20 project)
	[] auto focus the convert button after drag and drop (CODE IS NOT WORKING...)
[] Optional
	[] Allow users to specify the output image resolution (currently defaults to setting the <iframe> to 1000--roughly the width of many kindles--and then allowing the elements to replace to take up as much space as is natural under that constraint)
	[] adjust jpg quality
	[] PNG exports (for transparency support)
	[] bgcolor options?
